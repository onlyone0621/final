<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.cbo.mapper.CommunityMapper">
 
 <!-- 커뮤니티 생성 -->
<insert id="insertCommunity" parameterType="com.cbo.community.model.CommunityDTO">
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    SELECT sq_community_id.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO community (
    id, name, description, create_date, member_id
  ) VALUES (
    #{id}, #{name}, #{description}, SYSDATE, #{member_id}
  )
</insert>

<!-- 커뮤니티 생성 _id 마스터로 만들기  -->
<insert id="insertCommunityMaster">
  INSERT INTO community_member (
    community_id, member_id, role, join_date
  ) VALUES (
    #{param1}, #{param2}, 'master', SYSDATE
  )
</insert>


<delete id="deleteCommunity" parameterType="com.cbo.community.model.CommunityDTO">
	
	DELETE FROM community where id=#{id}
</delete>

<!-- 커뮤니티 모든 목록 -->
<select id="communityList" resultType="com.cbo.community.model.CommunityDTO">
	select * from community
</select>

<!-- 해당 커뮤니티 정보 갖고오기(이름) -->
<select id="communityInfoById" parameterType="int" resultType="com.cbo.community.model.CommunityDTO">
  SELECT * FROM community
  WHERE id = #{id}
</select>

<!-- 커뮤니티 커뮤니티 이름, 설명만 변경 -->
<update id="updateCommunityInfo" parameterType="com.cbo.community.model.CommunityDTO">
  UPDATE community
  SET name = #{name}, description = #{description}
  WHERE id = #{id}
</update>


<!-- 게시판 작성 -->
<insert id="insertBoard" parameterType="com.cbo.community.model.BoardDTO">
 
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    SELECT sq_community_board_id.NEXTVAL FROM dual
  </selectKey>

  INSERT INTO community_board (
    id, community_id, name, description, create_date
  )
  VALUES (
    #{id}, #{community_id}, #{name}, #{description}, SYSDATE
  )
</insert>


<!-- 특정 커뮤니티에 소속된 게시판만 가져오기 -->
<select id="boardListByCommunityId" resultType="com.cbo.community.model.BoardDTO" parameterType="map">
SELECT * FROM community_board
WHERE community_id = #{cId}
ORDER BY id ASC
</select>

<!-- board 게시판 리스트 전체 -->
<select id="boardList" resultType="com.cbo.community.model.BoardDTO">
  SELECT * FROM community_board
</select>

<!-- 게시글 글만 작성 -->
<insert id="insertPost" parameterType="com.cbo.community.model.PostDTO">
  
  <selectKey keyProperty="id" order="BEFORE" resultType="int">
    SELECT sq_board_post_id.NEXTVAL FROM dual
  </selectKey>
  
  INSERT INTO board_post (
    id, board_id, member_id, title, content, write_date, view_num, upvote
  )
  VALUES (
    #{id}, #{board_id}, #{member_id}, #{title}, #{content}, SYSDATE, 0, 0
  )
</insert>

<!-- 조회수 +1 -->
<update id="ViewNumPlus" parameterType="int">
  UPDATE board_post
  SET view_num = view_num + 1
  WHERE id = #{postId}
</update>

<!-- 좋아요 +1 -->
<update id="upvotePlus" parameterType="int">
  UPDATE board_post
  SET upvote = upvote + 1
  WHERE id = #{postId}
</update>

<!-- 게시글 본문보기 -->
<select id="selectPostById" parameterType="int" resultType="com.cbo.community.model.PostDTO">
    SELECT *
    FROM board_post
    WHERE id = #{postId}
</select>

<!-- 게시글 작성 이미지 넣기  -->
<insert id="insertImage" parameterType="com.cbo.community.model.ImageDTO">
  <selectKey keyProperty="id" order="BEFORE" resultType="int">
    SELECT sq_board_image_id.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO board_image (
    id, post_id, member_id, saved_name, original_name, upload_date
  )
  VALUES (
    #{id}, #{post_id}, #{member_id}, #{saved_name}, #{original_name}, SYSDATE
  )
</insert>

<!-- 이미지 본문보기 -->
<select id="selectImagesByPostId" parameterType="int" resultType="com.cbo.community.model.ImageDTO">
  SELECT * FROM board_image
  WHERE 
  post_id = #{postId}
</select>

<!-- 게시글 수정 -->
<update id="updatePost" parameterType="com.cbo.community.model.PostDTO">
  UPDATE board_post SET 
    title = #{title},
    content = #{content}
  WHERE id = #{id}
</update>

<!-- 게시글 삭제 -->
<delete id="deletePost" parameterType="int">
  DELETE FROM 
  board_post
  WHERE id = #{postId}
</delete>

<!-- 이미지 삭제 -->
<delete id="deleteImage" parameterType="int">
  DELETE FROM board_image WHERE id = #{id}
</delete>

<!-- 파일 삭제 시 파일명 얻기용 - 삭제용임 -->
<select id="selectImageById" parameterType="int" resultType="com.cbo.community.model.ImageDTO">
  SELECT * FROM board_image WHERE id = #{id}
</select>

<!-- 게시판 마다 게시글 목록 -->
<select id="postListByBoardId" parameterType="int" resultType="com.cbo.community.model.PostDTO">
  SELECT * FROM board_post
  WHERE board_id = #{boardId}
  ORDER BY id DESC
</select>

<!-- 게시글 LIST의 게시판 정보 가져오기 조인 게시판 - 커뮤니티 JOIN  -->
<select id="selectBoardAndCommunity" parameterType="int" resultType="map">
  SELECT 
    comboard.name AS board_name, 
    c.name AS community_name
  FROM community_board comboard 
  JOIN community c 
    ON comboard.community_id = c.id
  WHERE comboard.id = #{boardId}
</select>




<!-- 댓글 1:   댓글 + 답글 INSERT (댓글/답글 공통) -->
<insert id="insertReply" parameterType="com.cbo.community.model.ReplyDTO">
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    SELECT sq_board_reply_id.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO board_reply (
    id, board_post_id, member_id, content, write_date, ref, lev, sunbun
  )
  VALUES (
    #{id}, #{board_post_id}, #{member_id}, #{content}, SYSDATE, #{ref}, #{lev}, #{sunbun}
  )
</insert>

<!-- 댓글 2:  댓글 작성 후 ref = id 업데이트 -->
<update id="updateReplyRef" parameterType="int">
  UPDATE board_reply
  SET ref = #{id}
  WHERE id = #{id}
</update>

<!-- 댓글 3:  답글 작성 시 부모 댓글 조회 -->
<select id="selectReplyById" parameterType="int" resultType="com.cbo.community.model.ReplyDTO">
  SELECT *
  FROM board_reply
  WHERE id = #{id}
</select>

<!-- 댓글 4:  댓글/답글 수정 -->
<update id="updateReply" parameterType="com.cbo.community.model.ReplyDTO">
  UPDATE board_reply
  SET content = #{content}
  WHERE id = #{id} AND member_id = #{member_id}
</update>

<!-- 댓글 5:  댓글/답글 삭제 -->
<delete id="deleteReply" parameterType="int">
  DELETE FROM board_reply
  WHERE id = #{id}
</delete>

<!-- 댓글 6 : 댓글 목록 조회 (작성 순서 + 답글 순서 + 작성자 이름) -->
<select id="selectReplyByPostId" parameterType="int" resultType="map">
  SELECT 
    r.*, 
    NVL(m.name, '탈퇴한 회원') AS member_name
  FROM board_reply r
  LEFT JOIN member m ON r.member_id = m.id
  WHERE r.board_post_id = #{postId}
  ORDER BY r.ref ASC, r.sunbun ASC
</select>

<!-- 댓글 7: sunbun 밀기 (답글 삽입 순서 확보) -->
<update id="updateReplySunbun" parameterType="map">
  UPDATE board_reply
  SET sunbun = sunbun + 1
  WHERE ref = #{ref} AND sunbun >= #{sunbun}
</update>






<!-- 해당 커뮤니티 게시판 목록 불러오기(게시판이름, 운영자,커뮤니티id -->
<select id="boardListWithMaster" parameterType="int" resultType="map">
  SELECT 
    cb.id AS board_id,
    cb.name AS board_name,
    m.name AS master_name
  FROM community_board cb
  LEFT JOIN community c ON cb.community_id = c.id
  LEFT JOIN community_member cm ON cm.community_id = c.id AND cm.role = 'master'
  LEFT JOIN member m ON m.id = cm.member_id
  WHERE cb.community_id = #{cId}
  ORDER BY cb.id ASC
</select>

<!-- 해당 커뮤니티의 게시판 삭제(전체, 선택) -->   <!-- DELETE FROM community_board WHERE id IN (1, 2, 3) 순서로 -->
<delete id="deleteBoards" parameterType="list">
  DELETE FROM community_board
  WHERE id IN
  <foreach collection="list" item="id" separator="," open="(" close=")">
    #{id}
  </foreach>
</delete>

<!-- 최신글 5개 가져오기 -->
<select id="newestPosts" resultType="map">

  SELECT * FROM (
    SELECT 
      bp.id AS "post_id",
      bp.title AS "title",
      bp.content AS "content",
      bp.write_date AS "write_date",
      cb.id AS "board_id",
      c.id AS "community_id",
      cb.name AS "board_name",
      c.name AS "community_name",
      m.name AS "member_name",
      (SELECT COUNT(*) FROM board_reply r WHERE r.board_post_id = bp.id) AS "reply_count"
    FROM board_post bp
    JOIN community_board cb ON bp.board_id = cb.id
    JOIN community c ON cb.community_id = c.id
    LEFT JOIN member m ON bp.member_id = m.id
    ORDER BY bp.write_date DESC
  )
  WHERE ROWNUM &lt;= 5

</select><!--  &lt로 rownum 비교함 -->

<!-- 커뮤니티 홈 각 커뮤니티의 모든 글 리스트 -->

<select id="selectPostListByCommunityId" resultType="com.cbo.community.model.PostListDTO" parameterType="int">
  SELECT p.id AS post_id,
         p.title,
         p.content,
         p.write_date,
         p.upvote,
         p.board_id,
         b.name AS board_name,
         c.name AS community_name,
         m.name AS member_name,
         (SELECT COUNT(*) FROM board_reply r WHERE r.board_post_id = p.id) AS reply_count
  FROM board_post p
  JOIN community_board b ON p.board_id = b.id
  JOIN community c ON b.community_id = c.id  <!-- 여기!! -->
  LEFT JOIN member m ON p.member_id = m.id
  WHERE c.id = #{cId}
  ORDER BY p.write_date DESC
</select>

<!-- 게시판 수정 정보 가져오기 -->
<select id="selectBoardById" parameterType="int" resultType="com.cbo.community.model.BoardDTO">
  SELECT *
  FROM community_board
  WHERE id = #{boardId}
</select>

<!--  게시판 수정하기(이름, 설명) -->
<update id="updateBoardInfo" parameterType="com.cbo.community.model.BoardDTO">
  UPDATE community_board
  SET name = #{name},
      description = #{description}
  WHERE id = #{id}
</update>


<!-- 사이드바에서 확인하는 용도임) -->
<!-- 현재 커뮤니티에서 현재 사용자의 역할 알기(마스터, 부마스터만 멤버초대 할 수 있도록) -->
<select id="getCommunityRole" resultType="string">
  SELECT role 
  FROM community_member 
  WHERE community_id = #{cId} 
    AND member_id = #{memberId}
</select>

<!-- 커뮤니티 초대 대상 조회(마스터, 부마스터)   role != null 이면 이미 멤버-->
<select id="selectMemberInviteList" resultType="map">
  SELECT 
    m.id,
    m.name,
    g.name AS grade_name,
    d.name AS dept_name,
    cm.role
  FROM member m
  LEFT JOIN community_member cm 
    ON cm.member_id = m.id AND cm.community_id = #{cId}
  LEFT JOIN grade g ON m.grade_id = g.id
  LEFT JOIN dept d ON m.dept_id = d.id
  ORDER BY m.name
</select>

<!-- 초대 할 때 이미 멤버인지 확인 (초대 버튼 누를 때 중복 초대 방지) -->
<select id="checkInviteAlreadyMember" parameterType="map" resultType="int">
  SELECT COUNT(*)
  FROM community_member
  WHERE community_id = #{cId}
    AND member_id = #{memberId}
</select>

<!--멤버 초대(부마스터 지정하려면 #{role} 값은 controller/service에서 user, submaster 같은 값 지정해서 넘기면 됨ㄴ 지금은 user -->
<insert id="insertInviteMember">
  INSERT INTO community_member (community_id, member_id, role, join_date)
  VALUES (#{cId}, #{memberId}, #{role}, SYSDATE)
</insert>







<!-- 멤버 초대 1 : 현재 마스터 조회 -->
<select id="selectCurrentMaster" resultType="map">
  SELECT m.id, m.name
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  WHERE cm.community_id = #{cId} AND cm.role = 'master'
</select>

<!--  멤버 초대 2 : 현재 부마스터 목록 조회 -->
<select id="selectCurrentSubmasters" resultType="map">
  SELECT m.id, m.name
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  WHERE cm.community_id = #{cId} AND cm.role = 'submaster'
</select>

<!--  멤버 초대 3 : 가입된 멤버 전체 목록 -->
<select id="selectJoinAllMembers" resultType="map">
  SELECT m.id, m.name, d.name AS dept_name, g.name AS grade_name, cm.role
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  LEFT JOIN dept d ON m.dept_id = d.id
  LEFT JOIN grade g ON m.grade_id = g.id
  WHERE cm.community_id = #{cId}
  ORDER BY cm.role DESC, m.name
</select>

<!--  멤버 초대 4 : 마스터 변경 -->
<update id="updateMasterRole">
  UPDATE community_member
  SET role = CASE 
               WHEN member_id = #{newMasterId} THEN 'master'
               ELSE 'user'
             END
  WHERE community_id = #{cId}
</update>

<!--  멤버 초대 5 : 부마스터 지정 -->
<update id="assignSubmaster">
  UPDATE community_member
  SET role = 'submaster'
  WHERE community_id = #{cId} AND member_id = #{memberId}
</update>

<!--  멤버 초대 6 : 부마스터 해제 -->
<update id="removeSubmaster">
  UPDATE community_member
  SET role = 'user'
  WHERE community_id = #{cId} AND member_id = #{memberId}
</update>

<!--  멤버 초대 7 : 가입 상태 확인 뭘 따로 확인할녀는 용도였음 -->
<select id="getJoinStatus" parameterType="map" resultType="string">
  SELECT role
  FROM community_member
  WHERE community_id = #{cId}
    AND member_id = #{memberId}
</select>


<!-- 모든 멤버 상세보기(전체보기)  해야ㅚㅁ 전체보기 버튼 클리 ㄱ시 -->
<select id="fullMemberList" resultType="map">
  SELECT 
    m.id,
    m.name,
    d.name AS dept_name,
    g.name AS grade_name,
    m.email,
    cm.join_date,
    NVL(bp.post_count, 0) AS post_count,
    cm.role
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  LEFT JOIN dept d ON m.dept_id = d.id
  LEFT JOIN grade g ON m.grade_id = g.id
  LEFT JOIN (
    SELECT member_id, COUNT(*) AS post_count
    FROM board_post
    GROUP BY member_id
  ) bp ON m.id = bp.member_id
  WHERE cm.community_id = #{cId}
  ORDER BY cm.join_date DESC
</select>








<!-- 마스터  : 1,2 가입  승인(pending → user), 거절(pending → 거절) -->
<update id="updateMemberRole" parameterType="map">
  UPDATE community_member
  SET role = #{role}
  WHERE community_id = #{cId}
    AND member_id = #{memberId}
</update>

<!--  마스터  : 3 멤버 삭제(강제 탈퇴) -->  <!-- 조회해서 deleteCommunityMember : 마스터 아닐 때 삭제 -->
<delete id="deleteCommunityMember" parameterType="map">
  DELETE FROM community_member
  WHERE community_id = #{cId}
    AND member_id = #{memberId}
</delete>


<!-- 마스터  : 4 가입된 멤버 조회 (user, submaster, master) -->

<select id="joinMemberList" parameterType="int" resultType="map">
  SELECT 
    m.id,
    m.name,
    m.email,
    cm.join_date,
    d.name AS DEPT_NAME,
    cm.role,
    (
      SELECT COUNT(*)
      FROM board_post bp
      JOIN community_board cb ON bp.board_id = cb.id
      WHERE bp.member_id = m.id
        AND cb.community_id = #{cId}
    ) AS POST_COUNT
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  LEFT JOIN dept d ON m.dept_id = d.id
  WHERE cm.community_id = #{cId}
    AND cm.role IN ('user', 'submaster', 'master')
</select>



<!-- 마스터  : 5 특정 멤버 role 가져옴 (탈퇴/권한 관리용) role 조회 selectMemberRole : removeMember에서 마스터인지 확인 -->
<select id="selectMemberRole" parameterType="map" resultType="string">
  SELECT role 
  FROM community_member
  WHERE community_id = #{cId} 
    AND member_id = #{memberId}
</select>


<!--  마스터  : 6 가입 대기자 목록 조회 ) -->
<select id="pendingMemberList" parameterType="map" resultType="map">
SELECT 
  m.id,                   
  m.user_id,              
  m.name,                 
  m.email,                
  m.join_date,            
  m.dept_id,              
  m.profile_image,        
  cm.role,                
  d.name AS dept_name,     
  CASE
    WHEN cm.role = '가입대기' THEN 0              
    ELSE (
      SELECT COUNT(*)
      FROM board_post bp
      JOIN community_board cb ON bp.board_id = cb.id
      WHERE bp.member_id = m.id
        AND cb.community_id = #{cId}
    )
  END AS POST_COUNT       
FROM community_member cm
JOIN member m ON cm.member_id = m.id
LEFT JOIN dept d ON m.dept_id = d.id
WHERE cm.community_id = #{cId}
  AND cm.role IN
  <foreach collection="list" item="role" open="(" separator="," close=")">
    #{role}
  </foreach>
</select>


<!-- 마스터  : 7 커뮤니티 역할 구분 사이드바용 (master, submaster, user 구분용) -->
<select id="sidebarMemberList" resultType="map">
  SELECT 
    m.id,
    m.name,
    g.name AS grade_name,
    d.name AS dept_name,
    cm.role
  FROM community_member cm
  JOIN member m ON cm.member_id = m.id
  LEFT JOIN grade g ON m.grade_id = g.id
  LEFT JOIN dept d ON m.dept_id = d.id
  WHERE cm.community_id = #{cId}
  AND cm.role IN ('master', 'submaster', 'user')
  ORDER BY 
    CASE cm.role 
      WHEN 'master' THEN 1
      WHEN 'submaster' THEN 2
      ELSE 3
    END, m.name
</select>






<!-- 사용자 : 1 전체 커뮤니티 + 회원수 + 마스터 + 내 상태 -->
<select id="selectCommunityMainAll" parameterType="int" resultType="map">
  SELECT c.id AS ID,
         c.name AS NAME,
         (SELECT COUNT(*) FROM community_member cm 
          WHERE cm.community_id = c.id AND cm.role IN ('user', 'submaster', 'master')) AS MEMBER_COUNT,
         (SELECT m.name FROM community_member cm 
          JOIN member m ON cm.member_id = m.id
          WHERE cm.community_id = c.id AND cm.role = 'master') AS MASTER_NAME,
         NVL((SELECT cm.role FROM community_member cm 
              WHERE cm.community_id = c.id AND cm.member_id = #{memberId}), '미가입') AS STATUS
  FROM community c
</select>



<!-- 사용자 : 2 가입 신청 -->
<insert id="requestJoin">
  INSERT INTO community_member (community_id, member_id, role, join_date)
  VALUES (#{cId}, #{memberId}, '가입대기', SYSDATE)
</insert>

<!--  사용자 : 3 가입 신청 전 존재유무 -->
<!-- 기존 존재 여부 확인 위 데이터가 있으면 count = 1 없으면 count = 0 -->

<select id="checkExistCommunityMember" parameterType="map" resultType="int">
  SELECT COUNT(*) FROM community_member
  WHERE community_id = #{cId} AND member_id = #{memberId}
</select>


<!-- 기존 멤버를 pending 상태로 변경 --><!-- community_id=1, member_id=2, role=master 실행 시 데이터 ok role=pending 으로 바꿈  -->

<!--  사용자 : 4 기존멤버 pending상태로 변경 -->
<update id="updateToPending">
  UPDATE community_member
  SET role = '가입대기'
  WHERE community_id = #{cId} AND member_id = #{memberId}
</update>



<!-- 사용자 : 5 사용자 탈퇴 값은 @Param으로 MyBatis가 처리 -->
<delete id="leaveCommunity">
  DELETE FROM community_member 
  WHERE community_id = #{cId} AND member_id = #{memberId}
</delete>


<!-- 커뮤니티 가입된 목록 -->
<select id="communityMainJoin" parameterType="int" resultType="map">
SELECT 
    c.id AS ID,
    c.name AS NAME,
    (SELECT COUNT(*) 
     FROM community_member cm 
     WHERE cm.community_id = c.id) AS MEMBER_COUNT,
    (SELECT COUNT(*)
     FROM board_post bp 
     JOIN community_board cb ON bp.board_id = cb.id 
     WHERE cb.community_id = c.id) AS POST_COUNT,
    (SELECT m.name 
     FROM community_member cm 
     JOIN member m ON cm.member_id = m.id 
     WHERE cm.community_id = c.id AND cm.role = 'master') AS MASTER_NAME
FROM community c
JOIN community_member my_cm ON c.id = my_cm.community_id
WHERE my_cm.member_id = #{memberId}
</select>


<!-- 사이드바 가입된 커뮤니티 목록 이름 가져오기 -->
<select id="joinList" resultType="map">
    SELECT c.id AS ID,
           c.name AS NAME
    FROM community c
    JOIN community_member cm ON c.id = cm.community_id
    WHERE cm.member_id = #{userId}
      AND cm.role IN ('user', 'submaster', 'master')
</select>

 </mapper>
 
 
