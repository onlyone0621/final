<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.cbo.mapper.CommunityMapper">
 
 <insert id="insertCommunity" parameterType="com.cbo.community.model.CommunityDTO">
    INSERT INTO community VALUES (
        sq_community_id.nextval, #{name}, #{description}, SYSDATE, #{member_id}
    )
</insert>
<delete id="deleteCommunity" parameterType="com.cbo.community.model.CommunityDTO">
	
	DELETE FROM community where id=#{id}
</delete>

<!-- 커뮤니티 모든 목록 -->
<select id="communityList" resultType="com.cbo.community.model.CommunityDTO">
	select * from community
</select>

<!-- 해당 커뮤니티 정보 갖고오기(이름) -->
<select id="communityInfoById" parameterType="int" resultType="com.cbo.community.model.CommunityDTO">
  SELECT * FROM community
  WHERE id = #{id}
</select>

<!-- 커뮤니티 커뮤니티 이름, 설명만 변경 -->
<update id="updateCommunityInfo" parameterType="com.cbo.community.model.CommunityDTO">
  UPDATE community
  SET name = #{name}, description = #{description}
  WHERE id = #{id}
</update>


<!-- 게시판 작성 -->
<insert id="insertBoard" parameterType="com.cbo.community.model.BoardDTO">
 
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    SELECT sq_community_board_id.NEXTVAL FROM dual
  </selectKey>

  INSERT INTO community_board (
    id, community_id, name, description, create_date
  )
  VALUES (
    #{id}, #{community_id}, #{name}, #{description}, SYSDATE
  )
</insert>


<!-- 특정 커뮤니티에 소속된 게시판만 가져오기 -->
<select id="boardListByCommunityId" resultType="com.cbo.community.model.BoardDTO" parameterType="map">
SELECT * FROM community_board
WHERE community_id = #{cId}
ORDER BY id ASC
</select>

<!-- board 게시판 리스트 전체 -->
<select id="boardList" resultType="com.cbo.community.model.BoardDTO">
  SELECT * FROM community_board
</select>

<!-- 게시글 글만 작성 -->
<insert id="insertPost" parameterType="com.cbo.community.model.PostDTO">
  
  <selectKey keyProperty="id" order="BEFORE" resultType="int">
    SELECT sq_board_post_id.NEXTVAL FROM dual
  </selectKey>
  
  INSERT INTO board_post (
    id, board_id, member_id, title, content, write_date, view_num, upvote
  )
  VALUES (
    #{id}, #{board_id}, #{member_id}, #{title}, #{content}, SYSDATE, 0, 0
  )
</insert>

<!-- 조회수 +1 -->
<update id="ViewNumPlus" parameterType="int">
  UPDATE board_post
  SET view_num = view_num + 1
  WHERE id = #{postId}
</update>

<!-- 좋아요 +1 -->
<update id="upvotePlus" parameterType="int">
  UPDATE board_post
  SET upvote = upvote + 1
  WHERE id = #{postId}
</update>

<!-- 게시글 본문보기 -->
<select id="selectPostById" parameterType="int" resultType="com.cbo.community.model.PostDTO">
    SELECT *
    FROM board_post
    WHERE id = #{postId}
</select>

<!-- 게시글 작성 이미지 넣기  -->
<insert id="insertImage" parameterType="com.cbo.community.model.ImageDTO">
  <selectKey keyProperty="id" order="BEFORE" resultType="int">
    SELECT sq_board_image_id.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO board_image (
    id, post_id, member_id, saved_name, original_name, upload_date
  )
  VALUES (
    #{id}, #{post_id}, #{member_id}, #{saved_name}, #{original_name}, SYSDATE
  )
</insert>

<!-- 이미지 본문보기 -->
<select id="selectImagesByPostId" parameterType="int" resultType="com.cbo.community.model.ImageDTO">
  SELECT * FROM board_image
  WHERE 
  post_id = #{postId}
</select>

<!-- 게시글 수정 -->
<update id="updatePost" parameterType="com.cbo.community.model.PostDTO">
  UPDATE board_post SET 
    title = #{title},
    content = #{content}
  WHERE id = #{id}
</update>

<!-- 게시글 삭제 -->
<delete id="deletePost" parameterType="int">
  DELETE FROM 
  board_post
  WHERE id = #{postId}
</delete>

<!-- 이미지 삭제 -->
<delete id="deleteImage" parameterType="int">
  DELETE FROM board_image WHERE id = #{id}
</delete>

<!-- 파일 삭제 시 파일명 얻기용 - 삭제용임 -->
<select id="selectImageById" parameterType="int" resultType="com.cbo.community.model.ImageDTO">
  SELECT * FROM board_image WHERE id = #{id}
</select>

<!-- 게시판 마다 게시글 목록 -->
<select id="postListByBoardId" parameterType="int" resultType="com.cbo.community.model.PostDTO">
  SELECT * FROM board_post
  WHERE board_id = #{boardId}
  ORDER BY id DESC
</select>

<!-- 게시글 LIST의 게시판 정보 가져오기 조인 게시판 - 커뮤니티 JOIN  -->
<select id="selectBoardAndCommunity" parameterType="int" resultType="map">
  SELECT 
    comboard.name AS board_name, 
    c.name AS community_name
  FROM community_board comboard 
  JOIN community c 
    ON comboard.community_id = c.id
  WHERE comboard.id = #{boardId}
</select>


<!--  댓글 닷ㄹ기 + 답글 -->
<insert id="insertReply" parameterType="com.cbo.community.model.ReplyDTO">
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    SELECT sq_board_reply_id.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO board_reply (
    id, board_post_id, member_id, content, write_date, ref, lev, sunbun
  )
  VALUES (
    #{id}, #{board_post_id}, #{member_id}, #{content}, SYSDATE, #{ref}, #{lev}, #{sunbun}
  )
</insert>




<!-- 본인이 쓴 댓글만 수정 가능 -->
<update id="updateReply" parameterType="com.cbo.community.model.ReplyDTO">
  UPDATE board_reply
  SET content = #{content}
  WHERE id = #{id} AND member_id = #{member_id}
</update>

<!-- id 기준 댓글 삭제 -->
<delete id="deleteReply" parameterType="int">
  DELETE FROM board_reply
  WHERE id = #{id}
</delete>

<!-- 댓글 목록 읽기-->
<select id="selectReplyByPostId" parameterType="int" resultType="com.cbo.community.model.ReplyDTO">
  SELECT *
  FROM board_reply
  WHERE board_post_id = #{postId}
  ORDER BY ref ASC, sunbun ASC
</select>

<!-- sunbun 밀기 (답글 순서 확보) -->
<update id="updateReplySunbun" parameterType="map">
  UPDATE board_reply
  SET sunbun = sunbun + 1
  WHERE ref = #{ref} AND sunbun >= #{sunbun}
 
</update>

<!-- 해당 커뮤니티 게시판 목록 불러오기(게시판이름, 운영자,커뮤니티id -->
<select id="boardListWithMaster" parameterType="int" resultType="map">
  SELECT 
    cb.id AS board_id,
    cb.name AS board_name,
    m.name AS master_name
  FROM community_board cb
  LEFT JOIN community c ON cb.community_id = c.id
  LEFT JOIN community_member cm ON cm.community_id = c.id AND cm.role = 'master'
  LEFT JOIN member m ON m.id = cm.member_id
  WHERE cb.community_id = #{cId}
  ORDER BY cb.id ASC
</select>

<!-- 해당 커뮤니티의 게시판 삭제(전체, 선택) -->   <!-- DELETE FROM community_board WHERE id IN (1, 2, 3) 순서로 -->
<delete id="deleteBoards" parameterType="list">
  DELETE FROM community_board
  WHERE id IN
  <foreach collection="list" item="id" separator="," open="(" close=")">
    #{id}
  </foreach>
</delete>

<!-- 최신글 5개 가져오기 -->
<select id="newestPosts" resultType="map">

  SELECT * FROM (
    SELECT 
      bp.id AS "post_id",
      bp.title AS "title",
      bp.content AS "content",
      bp.write_date AS "write_date",
      cb.id AS "board_id",
      c.id AS "community_id",
      cb.name AS "board_name",
      c.name AS "community_name",
      m.name AS "member_name",
      (SELECT COUNT(*) FROM board_reply r WHERE r.board_post_id = bp.id) AS "reply_count"
    FROM board_post bp
    JOIN community_board cb ON bp.board_id = cb.id
    JOIN community c ON cb.community_id = c.id
    LEFT JOIN member m ON bp.member_id = m.id
    ORDER BY bp.write_date DESC
  )
  WHERE ROWNUM &lt;= 5

</select><!--  &lt로 rownum 비교함 -->

<!-- 커뮤니티 홈 각 커뮤니티의 모든 글 리스트 -->

<select id="selectPostListByCommunityId" resultType="com.cbo.community.model.PostListDTO" parameterType="int">
  SELECT p.id AS post_id,
         p.title,
         p.content,
         p.write_date,
         p.upvote,
         p.board_id,
         b.name AS board_name,
         c.name AS community_name,
         m.name AS member_name,
         (SELECT COUNT(*) FROM board_reply r WHERE r.board_post_id = p.id) AS reply_count
  FROM board_post p
  JOIN community_board b ON p.board_id = b.id
  JOIN community c ON b.community_id = c.id  <!-- 여기!! -->
  LEFT JOIN member m ON p.member_id = m.id
  WHERE c.id = #{cId}
  ORDER BY p.write_date DESC
</select>

<!-- 게시판 수정 정보 가져오기 -->
<select id="selectBoardById" parameterType="int" resultType="com.cbo.community.model.BoardDTO">
  SELECT *
  FROM community_board
  WHERE id = #{boardId}
</select>

<!--  게시판 수정하기(이름, 설명) -->
<update id="updateBoardInfo" parameterType="com.cbo.community.model.BoardDTO">
  UPDATE community_board
  SET name = #{name},
      description = #{description}
  WHERE id = #{id}
</update>


<!-- 권한 부여 -->
<!--  지정된 role 들에 해당하는 멤버 목록을 가져오는 쿼리 사용중 멤버: master, submaster, user  , 가입대기, 거절 -->

<select id="selectMembersByRoles" parameterType="map" resultType="map">
SELECT 
  m.id AS id,
  m.user_id AS user_id,
  m.name AS name,
  m.email AS email,
  m.join_date AS join_date,
  m.dept_id AS dept_id,
  m.profile_image AS profile_image,
  cm.role AS role,
  d.name AS dept_name
FROM community_member cm
JOIN member m ON cm.member_id = m.id
LEFT JOIN dept d ON m.dept_id = d.id
WHERE cm.community_id = #{cId}
  AND cm.role IN
  <foreach collection="list" item="role" open="(" separator="," close=")">
    #{role}
  </foreach>
</select>

<!-- 권한 수정  ((권한 변경, 가입 승인, 가입 거절) -->
<update id="updateMemberRole" parameterType="map">
UPDATE community_member
SET role = #{role}
WHERE community_id = #{cId}
  AND member_id = #{memberId}
</update>



<!-- 탈퇴 -->
<delete id="deleteCommunityMember" parameterType="map">
DELETE FROM community_member
WHERE community_id = #{cId}
  AND member_id = #{memberId}
</delete>


 </mapper>
 
 
