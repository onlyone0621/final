<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.cbo.mapper.ApprovalMapper">
  	
  	<resultMap type="map" id="formatResult">
  		<result property="id" column="id"/>
  		<result property="name" column="name"/>
  		<result property="template" column="template" jdbcType="CLOB" javaType="java.lang.String"/>
  	</resultMap>
  	
  	<select id="selectFormatNames" resultMap="formatResult">
  		SELECT *
  		FROM format
  	</select>
  	
  	<!-- Get doc list -->
  	<select id="selectApprovalDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
		SELECT *
		FROM (SELECT 
		        doc_view.*,
		        ROW_NUMBER() OVER (ORDER BY doc_view.id DESC) AS rn,
		        COUNT(*) OVER() AS max_rows
		        FROM doc_view
		        WHERE EXISTS (SELECT 1
		                    FROM APPROVAL_LINE
		                    WHERE approval_line.member_id != doc_view.member_id
		                    AND approval_line.doc_id = doc_view.id
		                    AND approval_line.member_id = #{id} 
		                    AND approval_line.status IN ('결재 완료', '반려')))
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
  	
  	<select id="selectReferenceDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
		SELECT *
		FROM (SELECT 
		            doc_view.*,
		            ROW_NUMBER() OVER (ORDER BY doc_view.id DESC) AS rn,
		            COUNT(*) OVER() AS max_rows
		        FROM doc_view
		        WHERE EXISTS (SELECT 1 
		                        FROM approval_line 
		                        WHERE approval_line.doc_id = doc_view.id 
		                        AND approval_line.member_id = #{id}
		                        AND status = '참조'))
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
  	
  	<select id="selectDraftDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
  		SELECT *
  		FROM (SELECT 
		  			doc_view.*,
		  			ROW_NUMBER() OVER(ORDER BY doc_view.id DESC) AS rn,
		  			COUNT(*) OVER() AS max_rows
				FROM doc_view
				WHERE member_id = #{id})
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
  	
  	<!-- Get todo doc list -->
  	<select id="selectPendingApprovalDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
  		WITH target_seq AS (
	    	SELECT grade.seq
	        FROM member
	            JOIN grade ON member.grade_id = grade.id
	        WHERE member.id = #{id}
		)
		SELECT *
		FROM (SELECT 
					doc_view.*,
				  	ROW_NUMBER() OVER(ORDER BY doc_view.id DESC) AS rn,
				  	COUNT(*) OVER() AS max_rows
				FROM doc_view
				WHERE EXISTS (
				    SELECT 1
				    FROM APPROVAL_LINE 
				    WHERE approval_line.doc_id = doc_view.id
				    AND approval_line.member_id = #{id}
				    AND approval_line.status = '결재 예정'
				)
				AND NOT EXISTS (
				    SELECT 1 
				    FROM approval_line 
				        JOIN member ON approval_line.member_id = member.id 
				        JOIN grade ON member.grade_id = grade.id
				        JOIN target_seq ON 1=1
				    WHERE approval_line.doc_id = doc_view.id 
				    AND approval_line.status = '결재 예정'
				    AND grade.seq > target_seq.seq 
				))
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
  	
  	<select id="selectPendingReferenceDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
  		SELECT *
  		FROM (SELECT 
		  			doc_view.*,
					ROW_NUMBER() OVER(ORDER BY doc_view.id DESC) AS rn,
					COUNT(*) OVER() AS max_rows 
				FROM doc_view
				WHERE EXISTS (SELECT 1 
				                FROM approval_line 
				                WHERE approval_line.doc_id = doc_view.id
				                AND approval_line.member_id = #{id}
				                AND approval_line.status = '참조')
				AND doc_view.status = '진행 중')
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
  	
  	<select id="selectScheduledApprovalDocs" parameterType="map" resultType="com.cbo.approval.model.DocViewDTO">
  		WITH target_seq AS (
		    SELECT grade.seq
		        FROM member
		            JOIN grade ON member.grade_id = grade.id
		        WHERE member.id = #{id}
		)
		SELECT *
		FROM (SELECT 
					doc_view.*,
				  	ROW_NUMBER() OVER(ORDER BY doc_view.id DESC) AS rn,
				  	COUNT(*) OVER() AS max_rows
				FROM doc_view
				WHERE EXISTS (
				    SELECT 1
				    FROM APPROVAL_LINE 
				    WHERE approval_line.doc_id = doc_view.id
				    AND approval_line.member_id = #{id}
				    AND approval_line.status = '결재 예정'
				)
				AND EXISTS (
				    SELECT 1 
				    FROM approval_line 
				        JOIN member ON approval_line.member_id = member.id 
				        JOIN grade ON member.grade_id = grade.id
				        JOIN target_seq ON 1=1
				    WHERE approval_line.doc_id = doc_view.id 
				    AND approval_line.status = '결재 예정'
				    AND grade.seq > target_seq.seq 
				))
		WHERE rn BETWEEN #{start} AND #{end}
  	</select>
	
	<!-- Get content of doc and its approval lines -->
	<resultMap type="map" id="docResult">
		<result property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="dept_name" column="dept_name"/>
		<result property="write_date" column="write_date"/>
		<result property="format_name" column="format_name"/>
		<result property="content" column="content" jdbcType="CLOB" javaType="java.lang.String"/>
		<result property="retention" column="retention"/>
		<result property="file_name" column="file_name"/>
	</resultMap>
	
	<select id="selectDoc" resultMap="docResult">
	SELECT
		doc.id,
		doc.title,
		member.name AS writer,
		dept.name AS dept_name,
		TO_CHAR(doc.write_date, 'YYYY-MM-DD') AS write_date,
		format.name AS format_name,
		doc.content,
		doc.retention,
		doc.file_name
	FROM doc
	JOIN member ON doc.member_id = member.id
	JOIN dept ON member.dept_id = dept.id
	JOIN format ON doc.format_id = format.id
	WHERE doc.id = #{id}
	</select>
	
	<select id="selectApprovers">
		SELECT 
			member.name AS member_name,
			NVL(member.profile_image, '/profileImage/defaultProfileImage.jpg') AS profile_image,
		 	dept.name AS dept_name,
		  	grade.name AS grade_name,
		   	approval_line.status,
		    approval_line.process_date
		FROM approval_line 
		    JOIN member ON approval_line.member_id = member.id 
		    JOIN dept ON member.dept_id = dept.id 
		    JOIN grade ON member.grade_id = grade.id 
		WHERE approval_line.doc_id = #{id}
		AND approval_line.status != '참조'
		ORDER BY 
		    CASE 
		        WHEN approval_line.status = '기안 상신' THEN 0
		        ELSE 1
		    END,
		grade.seq DESC
	</select>
	
	<select id="selectReviewers">
		SELECT 
			member.name AS member_name,
			NVL(member.profile_image, '/profileImage/defaultProfileImage.jpg') AS profile_image,
		 	dept.name AS dept_name,
		  	grade.name AS grade_name,
		   	approval_line.status,
		    approval_line.process_date
		FROM approval_line 
		    JOIN member ON approval_line.member_id = member.id 
		    JOIN dept ON member.dept_id = dept.id 
		    JOIN grade ON member.grade_id = grade.id 
		WHERE approval_line.doc_id = #{id}
		AND approval_line.status = '참조'
	</select>
	
	<!-- Submit a draft and its approval lines -->
	<select id="selectFormat" resultMap="formatResult">
		SELECT * 
		FROM format
		WHERE id = #{id}
	</select>
	
	<select id="selectMembers" resultType="com.cbo.member.model.OrganDTO">
  		SELECT member.id AS member_id,
  		 	member.name AS member_name,
  		  	dept.name AS dept_name,
  		   	grade.name AS grade_name,
  		    NVL(member.profile_image, '/profileImage/defaultProfileImage.jpg') AS profile_image
		FROM member
		    JOIN dept ON member.dept_id = dept.id
		    JOIN grade ON member.grade_id = grade.id 
		ORDER BY dept.id, grade.seq
  	</select>
	
	<select id="selectDocId" resultType="int">
		SELECT sq_doc_id.NEXTVAL 
		FROM dual
	</select>
	
	<insert id="insertDoc" parameterType="com.cbo.approval.model.DocDTO">
		INSERT INTO doc (id, title, member_id, format_id, content, file_name)
		VALUES (#{id}, #{title}, #{member_id}, #{format_id}, #{content}
		<choose>
			<when test="file_name == null">
				, NULL
			</when>
			<otherwise>
				, #{file_name}
			</otherwise>
		</choose>
		 )
	</insert>
	
	<insert id="insertApprovalLines" parameterType="com.cbo.approval.model.ApprovalLineDTO">
		INSERT INTO approval_line (doc_id, member_id, status, process_date)
		<choose>
			<when test="status == '결재 예정'">
				VALUES (#{doc_id}, #{member_id}, #{status}, NULL)
			</when>
			<otherwise>
				VALUES (#{doc_id}, #{member_id}, #{status}, SYSDATE)
			</otherwise>
		</choose>
	</insert>
	
	<!-- Approve or Reject -->
	<update id="updateStatus" parameterType="map">
		UPDATE approval_line 
		SET status = #{status}, process_date = SYSDATE 
		WHERE doc_id = #{doc_id} AND member_id = #{member_id}
	</update>
	
  </mapper>